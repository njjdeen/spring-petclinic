# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: default

steps:
- powershell: |
      Write-Host "Printing Variable: $env:TOKEN_PASS "
      F:\Tools\oc\oc.exe login --server=https://api.ocp-dta.esp.svb.org:6443 --token=$env:TOKEN_PASS  --insecure-skip-tls-verify=true
      curl artifactory-p.svb.org -UseBasicParsing
      F:\Tools\oc\oc.exe get pods
  env:
    TOKEN_PASS: $(sc-amos-dta-cicd)

- powershell: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
    Get-ChildItem -Force -LiteralPath F:\Tools
  displayName: 'Run a multi-line script'

- powershell: |
      echo "checking connection for all DTA worker nodes"

      For ($i = 74; $i -lt 90; $i++){
        $string_i = $i.ToString()
        $s = "10.218.39." + $string_i
      
        if(!(Test-Connection $s -count 1 -ea 0 -quiet)) {
          write-host "Error connecting to $s"
        } else {
          write-host "succussfully connected to $s"
        }
      }
  displayName: 'check connection for DTA worker nodes'

- powershell: |
      echo "checking connection for all P1 worker nodes"

      For ($i = 124; $i -lt 128; $i++){
        $string_i = $i.ToString()
        $s = "10.218.39." + $string_i
      
        if(!(Test-Connection $s -count 1 -ea 0 -quiet)) {
          write-host "Error connecting to $s"
        } else {
          write-host "succussfully connected to $s"
        }
      }
  displayName: 'check connection for P1 worker nodes'

- powershell: |
      echo "checking connection for all P2 worker nodes"

      For ($i = 174; $i -lt 178; $i++){
        $string_i = $i.ToString()
        $s = "10.218.39." + $string_i
      
        if(!(Test-Connection $s -count 1 -ea 0 -quiet)) {
          write-host "Error connecting to $s"
        } else {
          write-host "succussfully connected to $s"
        }
      }
  displayName: 'check connection for P2 worker nodes'

- powershell: |
      echo "checking connection for all QA worker nodes"

      For ($i = 21; $i -lt 24; $i++){
        $string_i = $i.ToString()
        $s = "10.218.39." + $string_i
      
        if(!(Test-Connection $s -count 1 -ea 0 -quiet)) {
          write-host "Error connecting to $s"
        } else {
          write-host "succussfully connected to $s"
        }
      }
  displayName: 'check connection for QA worker nodes'
  
- powershell: |
      cat F:\Tools\sonarqube\sonar-scanner\conf\sonar-scanner.properties

      ls F:\Tools\


- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'sonarqube-sa'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'petclinic'
    cliProjectName: 'petclinic'
    cliSources: '.'

- task: SonarQubeAnalyze@5
- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'

- task: InstallFortifySCA@7
  inputs:
    InstallerPath: 'F:\Tools\Fortify'
    LicenseFile: 'F:\Tools\Fortify\license'
    RunFortifyRulepackUpdate: false
